"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.seedBlog = seedBlog;
var database_1 = require("../lib/database");
var mdx_utils_1 = require("../lib/mdx-utils");
var samplePosts = [
    {
        title: 'Building Modern Web Applications with Next.js 15',
        description: 'A comprehensive guide to building scalable and performant web applications using Next.js 15 with the App Router, TypeScript, and modern development practices.',
        content: "# Building Modern Web Applications with Next.js 15\n\nThe web development landscape continues to evolve rapidly, and staying current with modern frameworks and best practices is crucial for building exceptional user experiences. In this post, I'll walk you through the key concepts and features that make Next.js 15 an excellent choice for modern web applications.\n\n## Why Next.js 15?\n\nNext.js 15 introduces several groundbreaking features that make it the go-to framework for React applications:\n\n### App Router (Stable)\n\nThe App Router provides a new paradigm for organizing your application with enhanced routing capabilities:\n\n```typescript\n// app/layout.tsx\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n### Server Components by Default\n\nServer Components reduce the JavaScript bundle size and improve performance:\n\n```typescript\n// This component runs on the server\nasync function BlogPosts() {\n  const posts = await getPosts()\n  \n  return (\n    <div>\n      {posts.map(post => (\n        <article key={post.id}>\n          <h2>{post.title}</h2>\n          <p>{post.excerpt}</p>\n        </article>\n      ))}\n    </div>\n  )\n}\n```\n\n## Key Features and Best Practices\n\n### 1. TypeScript Integration\n\nTypeScript provides excellent developer experience with static type checking:\n\n```typescript\ninterface Post {\n  id: string\n  title: string\n  content: string\n  publishedAt: Date\n  tags: string[]\n}\n\nasync function getPost(id: string): Promise<Post | null> {\n  // Implementation\n}\n```\n\n### 2. Automatic Optimizations\n\nNext.js 15 includes automatic optimizations:\n\n- **Image Optimization**: Automatic image resizing and format selection\n- **Font Optimization**: Automatic font subsetting and preloading\n- **Bundle Optimization**: Tree shaking and code splitting\n\n### 3. Streaming and Suspense\n\nImprove perceived performance with streaming:\n\n```typescript\nimport { Suspense } from 'react'\n\nfunction Page() {\n  return (\n    <div>\n      <h1>My Blog</h1>\n      <Suspense fallback={<PostsSkeleton />}>\n        <Posts />\n      </Suspense>\n    </div>\n  )\n}\n```\n\n## Performance Optimization Strategies\n\n### Code Splitting\n\nLeverage dynamic imports for better code splitting:\n\n```typescript\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponent = dynamic(() => import('../components/Heavy'), {\n  loading: () => <p>Loading...</p>,\n})\n```\n\n### Caching Strategies\n\nImplement effective caching with the new caching APIs:\n\n```typescript\nimport { cache } from 'react'\n\nconst getUser = cache(async (id: string) => {\n  const response = await fetch(`/api/users/${id}`)\n  return response.json()\n})\n```\n\n## SEO and Accessibility\n\n### Metadata API\n\nThe new Metadata API makes SEO configuration simple:\n\n```typescript\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My Blog Post',\n  description: 'A detailed description of my blog post',\n  openGraph: {\n    title: 'My Blog Post',\n    description: 'A detailed description of my blog post',\n    images: ['https://example.com/og-image.jpg'],\n  },\n}\n```\n\n### Accessibility Best Practices\n\nAlways ensure your applications are accessible:\n\n- Use semantic HTML elements\n- Provide proper ARIA labels\n- Ensure keyboard navigation works\n- Maintain proper color contrast\n\n```typescript\nfunction Button({ children, ...props }: ButtonProps) {\n  return (\n    <button\n      {...props}\n      className=\"focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      aria-label={props['aria-label']}\n    >\n      {children}\n    </button>\n  )\n}\n```\n\n## Testing Strategy\n\nA comprehensive testing strategy includes:\n\n### Unit Tests with Jest\n\n```typescript\nimport { render, screen } from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport Button from './Button'\n\ntest('renders button with correct text', () => {\n  render(<Button>Click me</Button>)\n  expect(screen.getByRole('button')).toHaveTextContent('Click me')\n})\n```\n\n### End-to-End Tests with Playwright\n\n```typescript\nimport { test, expect } from '@playwright/test'\n\ntest('homepage loads correctly', async ({ page }) => {\n  await page.goto('/')\n  await expect(page.getByRole('heading', { name: 'Welcome' })).toBeVisible()\n})\n```\n\n## Deployment and CI/CD\n\n### Vercel Integration\n\nDeploying Next.js applications to Vercel is seamless:\n\n1. Connect your GitHub repository\n2. Configure environment variables\n3. Deploy with automatic previews for pull requests\n\n### GitHub Actions\n\nSet up continuous integration:\n\n```yaml\nname: CI\non: [push, pull_request]\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n      - run: npm ci\n      - run: npm test\n      - run: npm run build\n```\n\n## Conclusion\n\nNext.js 15 provides a robust foundation for building modern web applications. By leveraging its built-in optimizations, TypeScript integration, and new App Router, you can create fast, scalable, and maintainable applications.\n\nThe combination of Server Components, automatic optimizations, and excellent developer experience makes Next.js 15 an excellent choice for your next project.\n\n---\n\n*Want to learn more about modern web development? Check out my other posts on React patterns, TypeScript best practices, and performance optimization techniques.*",
        featured: true,
        published: true,
        published_at: '2024-12-15T10:00:00Z',
        cover_image: 'https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=1200&h=600&fit=crop',
        tags: ['Next.js', 'React', 'TypeScript', 'Web Development']
    },
    {
        title: 'Mastering TypeScript: Advanced Patterns and Best Practices',
        description: 'Dive deep into advanced TypeScript patterns, generics, conditional types, and best practices for building type-safe applications.',
        content: "# Mastering TypeScript: Advanced Patterns and Best Practices\n\nTypeScript has revolutionized the way we write JavaScript, bringing static type checking and enhanced developer experience to our projects. In this comprehensive guide, we'll explore advanced TypeScript patterns that will help you write more robust and maintainable code.\n\n## Advanced Type Patterns\n\n### Generic Constraints\n\nGeneric constraints allow you to restrict the types that can be passed to a generic function or class:\n\n```typescript\ninterface Lengthwise {\n  length: number\n}\n\nfunction loggingIdentity<T extends Lengthwise>(arg: T): T {\n  console.log(arg.length)\n  return arg\n}\n\n// Works with arrays, strings, etc.\nloggingIdentity([1, 2, 3])\nloggingIdentity(\"hello\")\n```\n\n### Conditional Types\n\nConditional types enable type-level logic:\n\n```typescript\ntype NonNullable<T> = T extends null | undefined ? never : T\n\ntype ApiResponse<T> = T extends string \n  ? { message: T } \n  : T extends number \n    ? { code: T } \n    : { data: T }\n\ntype StringResponse = ApiResponse<string> // { message: string }\ntype NumberResponse = ApiResponse<number> // { code: number }\n```\n\n### Mapped Types\n\nTransform existing types into new ones:\n\n```typescript\ntype Partial<T> = {\n  [P in keyof T]?: T[P]\n}\n\ntype Required<T> = {\n  [P in keyof T]-?: T[P]\n}\n\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[P]\n}\n```\n\n## Utility Types in Action\n\n### Pick and Omit\n\n```typescript\ninterface User {\n  id: string\n  name: string\n  email: string\n  password: string\n  createdAt: Date\n}\n\ntype PublicUser = Pick<User, 'id' | 'name' | 'email'>\ntype UserInput = Omit<User, 'id' | 'createdAt'>\n```\n\n### Record Type\n\n```typescript\ntype Theme = 'light' | 'dark'\ntype Colors = Record<Theme, string>\n\nconst colors: Colors = {\n  light: '#ffffff',\n  dark: '#000000'\n}\n```\n\n## Advanced Function Types\n\n### Function Overloads\n\n```typescript\nfunction processValue(value: string): string\nfunction processValue(value: number): number\nfunction processValue(value: boolean): boolean\nfunction processValue(value: unknown): unknown {\n  // Implementation\n  return value\n}\n```\n\n### Higher-Order Function Types\n\n```typescript\ntype EventHandler<T> = (event: T) => void\ntype AsyncHandler<T, R> = (input: T) => Promise<R>\n\nfunction createHandler<T>(\n  handler: EventHandler<T>\n): EventHandler<T> {\n  return (event: T) => {\n    console.log('Handling event:', event)\n    handler(event)\n  }\n}\n```\n\n## Type Guards and Assertions\n\n### Custom Type Guards\n\n```typescript\ninterface Cat {\n  meow(): void\n}\n\ninterface Dog {\n  bark(): void\n}\n\nfunction isCat(animal: Cat | Dog): animal is Cat {\n  return 'meow' in animal\n}\n\nfunction makeSound(animal: Cat | Dog) {\n  if (isCat(animal)) {\n    animal.meow() // TypeScript knows this is a Cat\n  } else {\n    animal.bark() // TypeScript knows this is a Dog\n  }\n}\n```\n\n### Assertion Functions\n\n```typescript\nfunction assertIsNumber(value: unknown): asserts value is number {\n  if (typeof value !== 'number') {\n    throw new Error('Not a number')\n  }\n}\n\nfunction processNumber(value: unknown) {\n  assertIsNumber(value)\n  // TypeScript now knows value is a number\n  return value.toFixed(2)\n}\n```\n\n## Module Patterns\n\n### Namespace Organization\n\n```typescript\nnamespace Validation {\n  export interface StringValidator {\n    isAcceptable(s: string): boolean\n  }\n\n  export class EmailValidator implements StringValidator {\n    isAcceptable(s: string): boolean {\n      return /^[^@]+@[^@]+.[^@]+$/.test(s)\n    }\n  }\n}\n\nconst validator = new Validation.EmailValidator()\n```\n\n### Declaration Merging\n\n```typescript\ninterface Window {\n  customProperty: string\n}\n\n// Later in your code\nwindow.customProperty = 'Hello, World!'\n```\n\n## Best Practices\n\n### 1. Use Strict Configuration\n\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"strictFunctionTypes\": true\n  }\n}\n```\n\n### 2. Prefer Type Annotations\n\n```typescript\n// Good\nconst users: User[] = []\nconst config: Config = getConfig()\n\n// Avoid\nconst users = [] as User[]\nconst config = getConfig() as Config\n```\n\n### 3. Use Discriminated Unions\n\n```typescript\ntype LoadingState = {\n  status: 'loading'\n}\n\ntype SuccessState = {\n  status: 'success'\n  data: any[]\n}\n\ntype ErrorState = {\n  status: 'error'\n  error: string\n}\n\ntype State = LoadingState | SuccessState | ErrorState\n\nfunction handleState(state: State) {\n  switch (state.status) {\n    case 'loading':\n      // TypeScript knows state is LoadingState\n      break\n    case 'success':\n      // TypeScript knows state is SuccessState\n      console.log(state.data)\n      break\n    case 'error':\n      // TypeScript knows state is ErrorState\n      console.error(state.error)\n      break\n  }\n}\n```\n\n## Performance Considerations\n\n### Avoid Deep Nesting\n\n```typescript\n// Avoid\ntype DeepNested = {\n  level1: {\n    level2: {\n      level3: {\n        value: string\n      }\n    }\n  }\n}\n\n// Prefer\ntype Level3 = { value: string }\ntype Level2 = { level3: Level3 }\ntype Level1 = { level2: Level2 }\ntype Nested = { level1: Level1 }\n```\n\n### Use Type Aliases Wisely\n\n```typescript\n// Good for complex types\ntype EventCallback<T> = (event: T) => void | Promise<void>\n\n// Good for union types\ntype Status = 'pending' | 'fulfilled' | 'rejected'\n```\n\n## Conclusion\n\nMastering these advanced TypeScript patterns will significantly improve your code quality and developer experience. The key is to start with the basics and gradually incorporate more advanced patterns as your projects grow in complexity.\n\nRemember that TypeScript's type system is incredibly powerful, but it should enhance your development experience, not hinder it. Use these patterns judiciously and always prioritize code readability and maintainability.",
        featured: false,
        published: true,
        published_at: '2024-12-10T14:30:00Z',
        tags: ['TypeScript', 'JavaScript', 'Programming', 'Best Practices']
    },
    {
        title: 'The Art of Code Review: Building Better Software Together',
        description: 'Learn how to conduct effective code reviews that improve code quality, share knowledge, and build stronger development teams.',
        content: "# The Art of Code Review: Building Better Software Together\n\nCode review is one of the most important practices in software development, yet it's often done poorly or skipped entirely. A well-executed code review process can dramatically improve code quality, catch bugs early, and foster team collaboration.\n\n## Why Code Reviews Matter\n\n### Quality Assurance\n- Catch bugs before they reach production\n- Ensure adherence to coding standards\n- Identify potential security vulnerabilities\n- Verify that requirements are properly implemented\n\n### Knowledge Sharing\n- Spread domain knowledge across the team\n- Share best practices and techniques\n- Onboard new team members effectively\n- Cross-pollinate ideas between developers\n\n### Team Building\n- Foster collaboration and communication\n- Build trust and mutual respect\n- Create learning opportunities\n- Establish shared ownership of the codebase\n\n## Best Practices for Reviewers\n\n### 1. Review Early and Often\n\n```typescript\n// Instead of reviewing this massive PR...\nclass UserService {\n  // 500 lines of complex logic\n}\n\n// Review smaller, focused changes\nclass UserService {\n  validateUser(user: User): ValidationResult {\n    // 20 lines of focused logic\n  }\n}\n```\n\n### 2. Focus on the Important Things\n\n**High Priority:**\n- Logic errors and bugs\n- Security vulnerabilities  \n- Performance issues\n- Architectural concerns\n\n**Medium Priority:**\n- Code style consistency\n- Naming conventions\n- Code organization\n\n**Low Priority:**\n- Formatting (use automated tools)\n- Personal preferences\n\n### 3. Be Constructive and Specific\n\n```typescript\n// \u274C Poor feedback\n\"This is bad\"\n\n// \u2705 Good feedback\n\"Consider extracting this logic into a separate function for better testability:\n\nfunction validateEmail(email: string): boolean {\n  return /^[^@]+@[^@]+.[^@]+$/.test(email)\n}\n\"\n```\n\n## Best Practices for Authors\n\n### 1. Keep PRs Small and Focused\n\n```typescript\n// \u274C Mixing concerns\n// PR: \"Add user authentication + refactor database layer + update UI\"\n\n// \u2705 Single responsibility  \n// PR: \"Add email validation to user registration\"\n```\n\n### 2. Write Clear Descriptions\n\n```markdown\n## What\nAdd email validation to user registration form\n\n## Why  \nPrevent invalid emails from being stored in the database\n\n## How\n- Added email regex validation\n- Added unit tests for validation logic\n- Updated error messages\n\n## Testing\n- \u2705 Unit tests pass\n- \u2705 Manual testing completed\n- \u2705 No breaking changes\n```\n\n### 3. Respond Constructively to Feedback\n\n```typescript\n// \u274C Defensive response\n\"This works fine, why change it?\"\n\n// \u2705 Collaborative response  \n\"Good point about testability. I'll extract this into a separate function. \nThanks for the suggestion!\"\n```\n\n## Code Review Checklist\n\n### Functionality\n- [ ] Does the code do what it's supposed to do?\n- [ ] Are edge cases handled properly?\n- [ ] Is error handling appropriate?\n- [ ] Are there any obvious bugs?\n\n### Design & Architecture  \n- [ ] Is the code well-structured?\n- [ ] Does it follow SOLID principles?\n- [ ] Is the solution appropriately complex?\n- [ ] Are abstractions well-chosen?\n\n### Performance\n- [ ] Are there any obvious performance issues?\n- [ ] Is the algorithm appropriate?\n- [ ] Are database queries optimized?\n- [ ] Is caching used effectively?\n\n### Security\n- [ ] Is user input properly validated?\n- [ ] Are authentication/authorization checks in place?\n- [ ] Are secrets handled securely?\n- [ ] Is data sanitized appropriately?\n\n### Testing\n- [ ] Are there appropriate tests?\n- [ ] Do tests cover edge cases?\n- [ ] Are tests maintainable?\n- [ ] Is test coverage adequate?\n\n### Documentation\n- [ ] Is complex logic documented?\n- [ ] Are public APIs documented?\n- [ ] Is the README updated if needed?\n- [ ] Are breaking changes noted?\n\n## Common Anti-Patterns\n\n### The Nitpicker\n```typescript\n// \u274C Focusing on trivial issues\n\"Use single quotes instead of double quotes\"\n\"Add a space here\"\n\"This variable name could be shorter\"\n\n// \u2705 Use automated tools for style\n// Focus on logic and architecture\n```\n\n### The Rubber Stamper\n```typescript\n// \u274C Automatic approval\n\"LGTM\" // without actually reviewing\n\n// \u2705 Thoughtful review\n\"The logic looks solid. I tested the edge case \nwith empty arrays and it handles it correctly.\"\n```\n\n### The Perfectionist\n```typescript\n// \u274C Demanding perfection\n\"This entire module should be rewritten\"\n\"We should use a different architecture\"\n\n// \u2705 Pragmatic feedback\n\"This works well. For future iterations, \nconsider extracting this pattern into a utility.\"\n```\n\n## Tools and Automation\n\n### Automated Checks\n```yaml\n# GitHub Actions example\nname: Code Review\non: [pull_request]\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run ESLint\n        run: npm run lint\n      - name: Run Tests  \n        run: npm test\n      - name: Check Coverage\n        run: npm run coverage\n```\n\n### Review Templates\n```markdown\n## Review Checklist\n- [ ] Code compiles without warnings\n- [ ] Tests pass\n- [ ] Code follows style guide\n- [ ] Logic is sound\n- [ ] Performance is acceptable\n- [ ] Security considerations addressed\n\n## Questions/Concerns\n<!-- List any questions or concerns -->\n\n## Suggestions\n<!-- Constructive suggestions for improvement -->\n```\n\n## Building a Review Culture\n\n### Set Clear Expectations\n- Define what constitutes a good review\n- Establish response time expectations\n- Create guidelines for giving and receiving feedback\n- Make reviews a required part of the process\n\n### Lead by Example\n- Senior developers should model good review behavior\n- Take time to write thoughtful reviews\n- Accept feedback gracefully\n- Celebrate learning opportunities\n\n### Measure and Improve\n- Track review metrics (time to review, defect rate)\n- Gather feedback on the review process\n- Continuously refine guidelines\n- Share success stories\n\n## Conclusion\n\nEffective code reviews are an art that requires practice, empathy, and clear communication. When done well, they become one of the most valuable practices in your development process.\n\nRemember that the goal isn't to find fault, but to collaboratively build better software. Focus on learning, teaching, and improving together as a team.\n\nThe time invested in thoughtful code reviews pays dividends in code quality, team knowledge, and overall project success.",
        featured: false,
        published: true,
        published_at: '2024-12-05T09:15:00Z',
        tags: ['Code Review', 'Software Engineering', 'Team Collaboration', 'Best Practices']
    }
];
// Function to seed the database
function seedBlog() {
    return __awaiter(this, void 0, void 0, function () {
        var _i, samplePosts_1, post, slug, readingTime, postId, allPosts, publishedPosts, featuredPosts, allTags;
        return __generator(this, function (_a) {
            console.log('🌱 Seeding blog database...');
            try {
                for (_i = 0, samplePosts_1 = samplePosts; _i < samplePosts_1.length; _i++) {
                    post = samplePosts_1[_i];
                    slug = (0, mdx_utils_1.generateSlug)(post.title);
                    readingTime = (0, mdx_utils_1.estimateReadingTime)(post.content);
                    console.log("Creating post: ".concat(post.title));
                    postId = database_1.blogDb.createPost({
                        slug: slug,
                        title: post.title,
                        description: post.description,
                        content: post.content,
                        featured: post.featured,
                        published: post.published,
                        published_at: post.published_at,
                        reading_time: readingTime,
                        cover_image: post.cover_image,
                        author: 'Claude',
                        tags: post.tags
                    });
                    console.log("\u2705 Created post with ID: ".concat(postId));
                }
                console.log('🎉 Blog database seeded successfully!');
                allPosts = database_1.blogDb.getAllPosts();
                publishedPosts = database_1.blogDb.getPublishedPosts();
                featuredPosts = database_1.blogDb.getFeaturedPosts();
                allTags = database_1.blogDb.getAllTags();
                console.log("\n\uD83D\uDCCA Summary:");
                console.log("Total posts: ".concat(allPosts.length));
                console.log("Published posts: ".concat(publishedPosts.length));
                console.log("Featured posts: ".concat(featuredPosts.length));
                console.log("Total tags: ".concat(allTags.length));
            }
            catch (error) {
                console.error('❌ Error seeding blog database:', error);
                throw error;
            }
            return [2 /*return*/];
        });
    });
}
// Run if called directly
if (require.main === module) {
    seedBlog()
        .then(function () { return process.exit(0); })
        .catch(function () { return process.exit(1); });
}
